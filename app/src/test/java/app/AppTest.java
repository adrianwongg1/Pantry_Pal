/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package app;

import org.junit.jupiter.api.Test;

import app.client.*;
import app.client.App;
import app.client.View;
import app.client.Controller;
import app.client.Model;
import app.server.ChatGPTHandler;
import app.server.MyServer;
import javafx.stage.Stage;

import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.ScrollPane;
import javafx.scene.control.TextArea;
import javafx.scene.control.TextField;
import javafx.scene.control.PasswordField;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import javafx.scene.text.Text;
import javafx.scene.text.TextAlignment;
import java.io.*;

import static org.junit.jupiter.api.Assertions.*;

import java.io.IOException;

class AppTest {
    // Tests whether the prompt we give chatgpt maintains the same provided ingredients as the original recipe
    @Test 
    void gptSameIngredientsTest() throws IOException {
        String mealType = "dinner";
        String ingredients = "steak, potatoes, butter";
        Model model = new Model();
        String prompt = "Make me a " + mealType + " recipe using " + ingredients + " presented in JSON format with the \"title\" as the first key with its value as one string, \"ingredients\" as another key with its value as one string, and \"instructions\" as the last key with its value as one string";
        String response = model.performRequest("POST", null, null, prompt, null, "chatgpt");

        // API call should have successfully been made and returned thorugh model with the mealType and ingredients
        assertFalse(response.equals(""));
    }

    @Test
    void gptBddRefreshTest() throws IOException {
        // BDD TEST

        // Scenario: I don't like the recipe generated
        String generatedText = "Scrambled eggs with bacon and toast, Step 1:... Step 2:...";
        // Given: I have chosen breakfast and listed bacon, eggs, and sausage
        // When: I am given a recipe for scrambled eggs with bacon and toast
        // And: I do not want this recipe
        String mealType = "breakfast";
        String ingredients = "bacon, eggs, sausage";
        // Then: when I press the refresh button it will generate another recipe like a bacon egg sandwich
        Model refreshTest = new Model();
        String prompt = "Make me a " + mealType + " recipe using " + ingredients + " presented in JSON format with the \"title\" as the first key with its value as one string, \"ingredients\" as another key with its value as one string, and \"instructions\" as the last key with its value as one string";
        String response = refreshTest.performRequest("POST", null, null, prompt, null, "chatgpt");
        assertNotEquals(response, generatedText);
    }

    // Tests signing up on a name thats taken already 
    @Test
    void signupTakenTest() throws IOException { 
        MyServer.main(null);
        Model loginTest = new Model();
        String response = loginTest.performRequest("POST", "Bob", "password12", null, null, "signup");
        assertEquals("NAME TAKEN", response);
        assertNotEquals("SUCCESS", response);
    }

    // Tests a valid login
    @Test
    void loginValidTest() throws IOException { 
        //MyServer.main(null);
        Model loginTest = new Model();
        String response = loginTest.performRequest("POST", "Bob", "password12", null, null, "login");
        assertEquals("SUCCESS", response);
    }

    // Tests a invalid login password
    @Test
    void loginInvalidTest() throws IOException { 
        //MyServer.main(null);
        Model loginTest = new Model();
        String response = loginTest.performRequest("POST", "Bob", "wrongPassword", null, null, "login");
        assertEquals("PASSWORD FAILED", response);
        assertNotEquals("SUCCESS", response);
    }

    // Tests a username that doesn't exist for login
    @Test
    void loginDoesntExistTest() throws IOException { 
        //MyServer.main(null);
        Model loginTest = new Model();
        String response = loginTest.performRequest("POST", "fakeName", "password12", null, null, "login");
        assertEquals("NAME FAILED", response);
        assertNotEquals("SUCCESS", response);
    }

    @Test
    void sortAlphabeticallyTest() throws IOException { 
        //MyServer.main(null);
        Model sortModelTest = new Model();
        View view = new View(null);
        // RecipeList a = view.RecipeList();
        String username = "testSort";
        Controller cont = new Controller(view, sortModelTest, null);

        String recipe1 = "Cheesy Bacon Toast+bacon, cheese, toast+Preheat the oven to 375 degrees F. Place the bacon on a baking sheet. Bake for 20 minutes or until crispy. Spread cheese on toast and bake for an additional 5 minutes or until cheese is melted. Place bacon pieces on top of toast and enjoy!";
        String recipe2 = "Grilled Cheese Sandwich+2 slices of Sandwich Bread, 1 tablespoon of Butter, 2 slices of Cheese+Melt the butter in a skillet over medium-high heat. Place one slice of bread in the skillet and top with cheese. Cover with the other slice of bread. Fry until golden on one side, then flip and cook until golden on the other side and the cheese has melted. Enjoy!";
        String recipe3 = "Stuffed French Toast+2 slices of toast, 2 tablespoons of cream cheese, 2 tablespoons of raspberry jam, 2 tablespoons almond-flavored liqueur, 1 tablespoon butter+Lightly spread jam and cream cheese on one slice of toast. Place the other slice of toast on top and cut in half. Heat butter in a pan over medium heat. Dip the sandwich into the liqueur and then fry in the pan until golden on each side. Serve warm. Enjoy!";

        String recipes = sortModelTest.performRequest("GET", username, null, null, username, "loadRecipeHandler");
        String temp = sortModelTest.sortAlphabetically(recipes, view.getHomeFrame().getRecipeList());  
        String a = view.getHomeFrame().getRecipeList().getChildren().get(0).toString();
        
        String sorted = recipe1 + "_" + recipe2 + "_" + recipe3;
        assertEquals(temp, sorted);
    }
}