/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package app;

import org.bson.Document;
import org.bson.conversions.Bson;
import org.bson.types.ObjectId;
import org.junit.jupiter.api.Test;

import com.mongodb.client.MongoClient;
import com.mongodb.client.MongoClients;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;
import com.mongodb.client.model.Filters;

import app.Mock.ShareLinkMock;
import app.client.App;
import app.client.views.*;
import app.client.controllers.*;
import app.client.Model;
import app.server.ServerChecker;
import app.server.MyServer;
import java.net.*;
import java.io.InputStreamReader;
import java.io.BufferedReader;
import java.io.OutputStreamWriter;

import static com.mongodb.client.model.Filters.eq;
import static com.mongodb.client.model.Updates.combine;
import static org.junit.jupiter.api.Assertions.*;

import java.io.IOException;


class AppTest {
<<<<<<< HEAD
    // Tests whether the prompt we give chatgpt maintains the same provided ingredients as the original recipe
    
    private final String MONGOURI =  "mongodb+srv://bryancho:73a48JL4@cluster0.jpmyzqg.mongodb.net/?retryWrites=true&w=majority";

=======
    
    private final String MONGOURI =  "mongodb+srv://PeterNguyen4:Pn11222003-@cluster0.webebwr.mongodb.net/?retryWrites=true&w=majority";

    // Tests whether the prompt we give chatgpt maintains the same provided ingredients as the original recipe
>>>>>>> 6d96ddf2e04ecb9801bac22d892a25b0016f4dde
    @Test 
    void testGptSameIngredients() throws IOException {
        MyServer.main(null);
        String mealType = "dinner";
        String ingredients = "steak, potatoes, butter";
        Model model = new Model();
        String prompt = "Make me a " + mealType + " recipe using " + ingredients + " presented in JSON format with the \"title\" as the first key with its value as one string, \"ingredients\" as another key with its value as one string, and \"instructions\" as the last key with its value as one string";
        String response = model.performRequest("POST", null, null, prompt, null, "mockGPT");

        // API call should have successfully been made and returned thorugh model with the mealType and ingredients
        assertFalse(response.equals(""));
        MyServer.stop();
    }

    @Test
    void testGptBddRefresh() throws IOException {
        MyServer.main(null);
        // BDD TEST
        String user = "userBDD"; 

        // Scenario: I don't like the recipe generated
        String generatedText = "Scrambled eggs with bacon and toast, Step 1:... Step 2:...";
        // Given: I have chosen breakfast and listed bacon, eggs, and sausage
        // When: I am given a recipe for scrambled eggs with bacon and toast
        // And: I do not want this recipe
        String mealType = "breakfast";
        String ingredients = "bacon, eggs, sausage";
        // Then: when I press the refresh button it will generate another recipe like a bacon egg sandwich
        Model refreshTest = new Model();
        String prompt = "Make me a " + mealType + " recipe using " + ingredients + " presented in JSON format with the \"title\" as the first key with its value as one string, \"ingredients\" as another key with its value as one string, and \"instructions\" as the last key with its value as one string";
        String response = refreshTest.performRequest("POST", user, null, prompt, null, "mockGPT");
        assertNotEquals(response, generatedText);
        MyServer.stop();
    }

    // Tests successful sign up
    @Test
    void testValidSignup() throws IOException {
        MyServer.main(null);
        Model model = new Model();
        String newUser = Long.toHexString(System.currentTimeMillis());
        String password = Long.toHexString(System.currentTimeMillis() + 3);
        String response = model.performRequest("POST", newUser, password, null, null, "signup");
        assertTrue(response.equals("NEW USER CREATED"));
        MyServer.stop();
    }

    // Tests signing up on a name thats taken already 
    @Test
    void testSignupUsernameTaken() throws IOException { 
        MyServer.main(null);
        Model loginTest = new Model();
<<<<<<< HEAD


        try (MongoClient mongoClient = MongoClients.create(MONGOURI)) {
            MongoDatabase database = mongoClient.getDatabase("PantryPal");
            MongoCollection<Document> collection = database.getCollection("credentials");
            
            Document user = new Document("_id", new ObjectId());
            user.append("user", "Bob");
            user.append("password","password12");

            collection.insertOne(user);

            String response = loginTest.performRequest("POST", "Bob", "password12", null, null, "signup");
            assertEquals("USERNAME TAKEN", response);
            Bson filter = eq("user","Bob");
            collection.deleteMany(filter);
        }
=======
        String response = loginTest.performRequest("POST", "Bob", "password12", null, null, "signup");
        assertEquals("USERNAME TAKEN", response);
>>>>>>> 6d96ddf2e04ecb9801bac22d892a25b0016f4dde
        MyServer.stop();
    }

    // Tests a valid login
    @Test
    void testValidLoginValid() throws IOException { 
        MyServer.main(null);
        Model loginTest = new Model();
<<<<<<< HEAD
        try (MongoClient mongoClient = MongoClients.create(MONGOURI)) {
            MongoDatabase database = mongoClient.getDatabase("PantryPal");
            MongoCollection<Document> collection = database.getCollection("credentials");
            
            Document user = new Document("_id", new ObjectId());
            user.append("user", "Bob");
            user.append("password","password12");

            collection.insertOne(user);

            String response = loginTest.performRequest("POST", "Bob", "password12", null, null, "login");
            assertEquals("SUCCESS", response);
            Bson filter = eq("user","Bob");
            collection.deleteMany(filter);
        }

=======
        String response = loginTest.performRequest("POST", "Bob", "password12", null, null, "login");
        assertEquals("SUCCESS", response);
>>>>>>> 6d96ddf2e04ecb9801bac22d892a25b0016f4dde
        MyServer.stop();
    }

    // Tests a invalid login password
    @Test
    void testInvalidLoginCredentials() throws IOException { 
        MyServer.main(null);
        Model loginTest = new Model();
<<<<<<< HEAD

        try (MongoClient mongoClient = MongoClients.create(MONGOURI)) {
            MongoDatabase database = mongoClient.getDatabase("PantryPal");
            MongoCollection<Document> collection = database.getCollection("credentials");
            
            Document user = new Document("_id", new ObjectId());
            user.append("user", "Bob");
            user.append("password","password12");

            collection.insertOne(user);

            String response = loginTest.performRequest("POST", "Bob", "wrongPassword", null, null, "login");
            assertEquals("INCORRECT CREDENTIALS", response);
            Bson filter = eq("user","Bob");
            collection.deleteMany(filter);
        }

=======
        String response = loginTest.performRequest("POST", "Bob", "wrongPassword", null, null, "login");
        assertEquals("INCORRECT CREDENTIALS", response);
>>>>>>> 6d96ddf2e04ecb9801bac22d892a25b0016f4dde
        MyServer.stop();
    }

    // Tests a username that doesn't exist for login
    @Test
    void testLoginDoesntExist() throws IOException { 
        MyServer.main(null);
        Model loginTest = new Model();
        String response = loginTest.performRequest("POST", "fakeName", "password12", null, null, "login");
        assertEquals("USER NOT FOUND", response);
        MyServer.stop();
    }

    // Test /mealtype route to filter breakfast recipes belonging to "testGetMealType" account
    @Test
    void dalleLinkGenerationTest() throws IOException{
        MyServer.main(null);
        Model dalleTest =  new Model();
        String recipeTitle = "Bacon Eggs and Ham";

        String url = "https://www.google.com/imgres?imgurl=https%3A%2F%2Fupload.wikimedia.org%2Fwikipedia%2Fcommons%2Fthumb%2Ff%2Ffa%2FHam_and_eggs_over_easy.jpg%2F1200px-Ham_and_eggs_over_easy.jpg&tbnid=jL-bcwE1AkYVvM&vet=12ahUKEwjm75GvxvSCAxWwJEQIHRB_BbYQMygBegQIARBW..i&imgrefurl=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FHam_and_eggs&docid=2WM6ZYnDhyPs5M&w=1200&h=789&q=bacon%20eggs%20and%20ham&ved=2ahUKEwjm75GvxvSCAxWwJEQIHRB_BbYQMygBegQIARBW";

        String response = dalleTest.performRequest("POST", null, null, recipeTitle, null, "mockDalle");
        
        assertEquals(url, response);
        MyServer.stop();

    }

    @Test
    void testGetMealType() throws IOException {
        MyServer.main(null);
        String user = "testGetMealType";
        Model mealtype = new Model();
<<<<<<< HEAD

        try (MongoClient mongoClient = MongoClients.create(MONGOURI)) {
            MongoDatabase database = mongoClient.getDatabase("PantryPal");
            MongoCollection<Document> collection = database.getCollection("recipes");
            
            Document doc = new Document("_id", new ObjectId());
            doc.append("title", "Egg Bacon and Ham Breakfast Recipe");
            doc.append("mealtype","breakfast");
            doc.append("user",user);

            collection.insertOne(doc);
            String response = mealtype.performRequest("GET", user, null, null, "breakfast", "mealtype");
            // Account with username "testGetMealType" has ONE breakfast recipe named "Egg Bacon and Ham Breakfast Recipe"
            assertEquals("Egg Bacon and Ham Breakfast Recipe+breakfast", response);

        }
=======
        String response = mealtype.performRequest("GET", user, null, null, "breakfast", "mealtype");
        // Account with username "testGetMealType" has ONE breakfast recipe named "Egg Bacon and Ham Breakfast Recipe"
        assertEquals(" Bacon and Cheese Jalapeno Frittata;+breakfast", response);
>>>>>>> 6d96ddf2e04ecb9801bac22d892a25b0016f4dde
        MyServer.stop();
    }

    // Test /mealtype route to filter lunch recipes that have not been saved
    @Test
    void testGetNoLunchRecipe() throws IOException {
        MyServer.main(null);
        String user = "testGetMealType";
        Model mealtype = new Model();
        String response = mealtype.performRequest("GET", user, null, null, "lunch", "mealtype");
        // Account with username "testGetMealType" has NO lunch recipes
        assertEquals(null, response);
        MyServer.stop();
    }

    // Test /mealtype route to filter the two dinner recipes belonging to "testGetMealType" account
<<<<<<< HEAD
    // 
    @Test
    void testGetMultipleDinnerRecipes() throws IOException {
        MyServer.main(null);
        Model mealtype = new Model();
        // Account with username "testGetMealType" has TWO dinner recipes
        String t = "testTitle";
        String i = "testIngredients";
        String ins = "testInstructinos";
        String user = "testGetMealType";
        String m = "dinner";
        String method = "GET";
        
        try (MongoClient mongoClient = MongoClients.create(MONGOURI)) {
            MongoDatabase database = mongoClient.getDatabase("PantryPal");
            MongoCollection<Document> collection = database.getCollection("recipes");
            
            for(int x = 1; x < 3;x++){
                Document recipe = new Document("_id", new ObjectId());
                String abc = t + x;
                recipe.append("title", abc);
                recipe.append("ingredients", i);
                recipe.append("instructions", ins);
                recipe.append("user", user);
                recipe.append("mealtype", m);
                
                collection.insertOne(recipe);
            }
            String response = mealtype.performRequest("GET", user, null, null, "dinner", "mealtype");
            assertEquals("testTitle1+dinner_testTitle2+dinner",response);
            Bson filter = eq("user",user);
            collection.deleteMany(filter);
        }



        // assertEquals("Cheesy Vegetable Tortellini Bake+dinner+Savory Stuffed Pancakes+dinner", response);
=======
    @Test
    void testGetMultipleDinnerRecipes() throws IOException {
        MyServer.main(null);
        String user = "testGetMealType";
        Model mealtype = new Model();
        String response = mealtype.performRequest("GET", user, null, null, "dinner", "mealtype");
        // Account with username "testGetMealType" has TWO dinner recipes
        assertEquals(" Pancake Bake with Maple Syrup Glaze+dinner_Oven-Baked Salmon with Saffron-Rice:\"+dinner", response);
>>>>>>> 6d96ddf2e04ecb9801bac22d892a25b0016f4dde
        MyServer.stop();
    }

    @Test
    void testServerNotRunning() throws IOException{
        boolean status = ServerChecker.isServerRunning("localhost", 8100);
        assertEquals(false, status);
    }
    
    @Test
    void testServerRunning() throws IOException{
        MyServer.main(null);
        boolean status = ServerChecker.isServerRunning("localhost", 8100);
        assertEquals(true, status);
        MyServer.stop();
    }

    // UNIT TEST
    @Test
    void testGetShareLink() throws IOException{
        // given user has a recipe already
        Mock m = new Mock();
<<<<<<< HEAD
        ShareLinkMock mock = m.new ShareLinkMock("Bryan", "steak and eggs");
        // want to test the share functionality as a unit test
        String web = mock.getWebString();
        assertNotEquals("", web);
        assertTrue(web.contains("Bryan"));
        assertTrue(web.contains("steak and eggs"));
=======
        ShareLinkMock mock = m.new ShareLinkMock("adrian", "Sausage and Egg Breakfast Hash");
        // want to test the share functionality as a unit test
        String web = mock.getWebString();
        assertNotEquals("", web);
        assertTrue(web.contains("adrian"));
        assertTrue(web.contains("Sausage and Egg Breakfast Hash"));
>>>>>>> 6d96ddf2e04ecb9801bac22d892a25b0016f4dde
    }

    // Integration Test with model and server
    @Test 
    void shareIntegrationTest() throws IOException{
        MyServer.main(null);
        Model shareTest =  new Model();
        // have a recipe in the database already
<<<<<<< HEAD
        String recipeTitle = "Steak and Egg Skillet";
        String user = "Bryan";
        String error = "The recipe you have selected cannont be found by the server";
        
        try (MongoClient mongoClient = MongoClients.create(MONGOURI)) {
            MongoDatabase database = mongoClient.getDatabase("PantryPal");
            MongoCollection<Document> collection = database.getCollection("recipes");
            
            Document doc = new Document("_id", new ObjectId());
            doc.append("title", recipeTitle);
            doc.append("mealtype","breakfast");
            doc.append("user",user);

            collection.insertOne(doc);
            String response = shareTest.performRequest("GET", user, null, null, recipeTitle, "share");

            assertTrue(response.contains(recipeTitle));
            assertFalse(response.contains(error));

            Bson filter = eq("title",recipeTitle);
            collection.deleteMany(filter);
        }

=======
        String recipeTitle = "Sausage and Egg Breakfast Hash";
        String user = "adrian";
        String error = "The recipe you have selected cannont be found by the server";
        String response = shareTest.performRequest("GET", user, null, null, recipeTitle, "share");

        assertTrue(response.contains(recipeTitle));
        assertFalse(response.contains(error));
>>>>>>> 6d96ddf2e04ecb9801bac22d892a25b0016f4dde
        
        MyServer.stop();
    }

    // just testing server request handler method,  GET METHOD
    // USER+TITLE+INGREDIENTS+INSTRUCTIONS+MEALTYPE
    // UNIT TEST
    @Test
    void GETrequestHandlerUnitTest() throws IOException, URISyntaxException{
        MyServer.main(null);
        // have a recipe in the database already
<<<<<<< HEAD


        String t = "testTitle";
        String i = "testIngredients";
        String ins = "testInstructinos";
        String u = "testUser";
        String m = "testMealtype";
        String method = "GET";

        try (MongoClient mongoClient = MongoClients.create(MONGOURI)) {
            MongoDatabase database = mongoClient.getDatabase("PantryPal");
            MongoCollection<Document> collection = database.getCollection("recipes");
            
            Document recipe = new Document("_id", new ObjectId());
            recipe.append("title", t);
            recipe.append("user", u);
            recipe.append("mealtype", m);
            recipe.append("content", i+ins);

            collection.insertOne(recipe);

            String query = URLEncoder.encode("u=" + u + "&q=" + t, "UTF-8");
            String urlString = "http://localhost:8100/?" + query;
            URL url = new URI(urlString).toURL();
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.setRequestMethod(method);
            conn.setDoOutput(true);
            BufferedReader in = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String response = in.readLine();    
            in.close();

            assertNotEquals("", response);;
            assertTrue(response.contains(t));
            assertTrue(response.contains(i));
            assertTrue(response.contains(ins));


            Bson filter = Filters.and(Filters.eq("title",t),Filters.eq("user", u));
            collection.findOneAndDelete(filter);

        }
=======
        String recipeTitle = "Hash and Egg Breakfast Skillet";
        String user = "adrian";
        String ingred = "2 teaspoons olive oil, 2 cups frozen shredded potatoes, 1/2 cup diced onion, 1/2 cup chopped green bell pepper, 1/2 teaspoon garlic pepper seasoning, 1 (12-ounce) package turkey sausage, 8 large eggs, 1/4 teaspoon salt, 1/4 teaspoon black pepper";
        String instructions = "Heat oil in a large skillet over medium-high heat. Add potatoes, onion, bell pepper, and garlic pepper seasoning. Cook for 10 minutes, stirring often. Move the potato mixture to the side of the skillet and add sausage. Cook for 6-8 minutes, stirring and breaking up the sausage as it cooks. Push the potato mixture to the side and crack eggs into the same skillet. Sprinkle with salt and black pepper. Cook until eggs are scrambled and the sausage and potatoes are cooked through.";
        String mealtype = "breakfast";
        String method = "GET";
        String query = URLEncoder.encode("u=" + user + "&q=" + recipeTitle, "UTF-8");
        String urlString = "http://localhost:8100/?" + query;
        URL url = new URI(urlString).toURL();
        HttpURLConnection conn = (HttpURLConnection) url.openConnection();
        conn.setRequestMethod(method);
        conn.setDoOutput(true);
        BufferedReader in = new BufferedReader(new InputStreamReader(conn.getInputStream()));
        String response = in.readLine();    
        in.close();

        assertNotEquals("", response);;
        assertTrue(response.contains(recipeTitle));
        assertTrue(response.contains(ingred));
        assertTrue(response.contains(instructions));

        
>>>>>>> 6d96ddf2e04ecb9801bac22d892a25b0016f4dde
        MyServer.stop();
    }


    /**
     * UNIT TEST
     * Test for just the server handler method to post the corret data
     * 
     * removes added data at the end to make sure to not change user recipes
     * @throws IOException
     * @throws URISyntaxException
     */
    @Test
    void POSTrequestHandlerTest() throws IOException, URISyntaxException{
        MyServer.main(null);
<<<<<<< HEAD


        // have a recipe in the database already
        String recipeTitle = "pancakes with maple syrup";
        String user = "Bryan";
        String ingred = "flour,eggs,sugar,milk";
        String instructions = "mix ingredients to make batter and then pour into hot pan";
=======
        // have a recipe in the database already
        String recipeTitle = "Hash and Egg Breakfast Skillet";
        String user = "adrian";
        String ingred = "2 teaspoons olive oil, 2 cups frozen shredded potatoes, 1/2 cup diced onion, 1/2 cup chopped green bell pepper, 1/2 teaspoon garlic pepper seasoning, 1 (12-ounce) package turkey sausage, 8 large eggs, 1/4 teaspoon salt, 1/4 teaspoon black pepper";
        String instructions = "Heat oil in a large skillet over medium-high heat. Add potatoes, onion, bell pepper, and garlic pepper seasoning. Cook for 10 minutes, stirring often. Move the potato mixture to the side of the skillet and add sausage. Cook for 6-8 minutes, stirring and breaking up the sausage as it cooks. Push the potato mixture to the side and crack eggs into the same skillet. Sprinkle with salt and black pepper. Cook until eggs are scrambled and the sausage and potatoes are cooked through.";
>>>>>>> 6d96ddf2e04ecb9801bac22d892a25b0016f4dde
        String mealtype = "breakfast";
        String img = "test-img";
        String method = "POST";

        //String query = URLEncoder.encode("u=" + user + "&q=" + recipeTitle, "UTF-8");
        String urlString = "http://localhost:8100/";
        URL url = new URI(urlString).toURL();
        HttpURLConnection conn = (HttpURLConnection) url.openConnection();
        conn.setRequestMethod(method);
        conn.setDoOutput(true);


        // writing to the body of the request
<<<<<<< HEAD
        String reqBody = user + "+" + recipeTitle + "+" + ingred + instructions + "+" + mealtype + "+" + img;
=======
        String reqBody = user + "+" + recipeTitle + "+" + ingred + "+" + instructions + "+" + mealtype + "+" + img;
>>>>>>> 6d96ddf2e04ecb9801bac22d892a25b0016f4dde
        OutputStreamWriter out = new OutputStreamWriter(conn.getOutputStream());
        out.write(URLEncoder.encode(reqBody, "UTF-8"));
        out.flush();
        out.close();


        // reading the input
        BufferedReader in = new BufferedReader(new InputStreamReader(conn.getInputStream()));
        String response = in.readLine();    
        in.close();
<<<<<<< HEAD
=======

>>>>>>> 6d96ddf2e04ecb9801bac22d892a25b0016f4dde
        assertNotEquals("invalid post", response);

        try (MongoClient mongoClient = MongoClients.create(MONGOURI)) {
            MongoDatabase database = mongoClient.getDatabase("PantryPal");
            MongoCollection<Document> collection = database.getCollection("recipes");
      
            Bson filter = eq("title", recipeTitle);
            Bson filter2 = eq("user",user);
            filter = combine(filter,filter2);

            // checkign that post method correctly added to database
            Document recipe = collection.find(filter).first();
            assertEquals(recipeTitle, recipe.getString("title"));
<<<<<<< HEAD
            assertTrue(recipe.getString("content").contains(instructions));
            assertEquals(user,recipe.getString("user"));
            assertEquals(mealtype, recipe.getString("mealtype"));


            // removing newly added recipe 
            collection.findOneAndDelete(filter);
            recipe = collection.find(filter).first();
            assertNull(recipe);
=======
            assertEquals(ingred, recipe.getString("ingredients"));
            assertEquals(instructions,recipe.getString("instructions"));
            assertEquals(user,recipe.getString("user"));
            assertEquals(mealtype, recipe.getString("mealtype"));

>>>>>>> 6d96ddf2e04ecb9801bac22d892a25b0016f4dde
        }
        
        MyServer.stop();
    }


    
    @Test
    void PUTrequestHandlerTest() throws IOException, URISyntaxException{
        MyServer.main(null);
        // have a recipe in the database already channging the ingredients and the instructions
<<<<<<< HEAD
        String recipeTitle = "pancakes";
        String user = "Bryan";
        int random = (int)(Math.random() * 100);
        String ingred = "flour,eggs,sugar,milk," + random + "bacons(number of bacon is random)";
        String instructions = "mix ingredients to make batter and then pour into hot pan with lots of bacon";
        String mealtype = "breakfast";
        String method = "PUT";

        try (MongoClient mongoClient = MongoClients.create(MONGOURI)) {
            MongoDatabase database = mongoClient.getDatabase("PantryPal");
            MongoCollection<Document> collection = database.getCollection("recipes");

            Document recipe = new Document("_id", new ObjectId());
            recipe.append("title", recipeTitle);
            recipe.append("user", user);
            recipe.append("content", "no inged or instrucitons");
            recipe.append("mealtype", mealtype);

            collection.insertOne(recipe);

            String urlString = "http://localhost:8100/";
            URL url = new URI(urlString).toURL();
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.setRequestMethod(method);
            conn.setDoOutput(true);


            // writing to the body of the request
            String reqBody = user + "+" + recipeTitle + "+" + ingred + instructions;
            OutputStreamWriter out = new OutputStreamWriter(conn.getOutputStream());
            out.write(URLEncoder.encode(reqBody, "UTF-8"));
            out.flush();
            out.close();

            // reading the input
            BufferedReader in = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String response = in.readLine();    
            in.close();

            assertEquals("valid put", response);


=======
        
        String recipeTitle = "Hash and Egg Breakfast Skillet";
        String user = "adrian";
        String ingred = "2 teaspoons olive oil, 2 cups frozen shredded potatoes, 1/2 cup diced onion, 1/2 cup chopped green bell pepper, 1/2 teaspoon garlic pepper seasoning, 1 (12-ounce) package turkey sausage, 8 large eggs, 1/4 teaspoon salt, 1/4 teaspoon black pepper";
        String instructions = "Heat oil in a large skillet over medium-high heat. Add potatoes, onion, bell pepper, and garlic pepper seasoning. Cook for 10 minutes, stirring often. Move the potato mixture to the side of the skillet and add sausage. Cook for 6-8 minutes, stirring and breaking up the sausage as it cooks. Push the potato mixture to the side and crack eggs into the same skillet. Sprinkle with salt and black pepper. Cook until eggs are scrambled and the sausage and potatoes are cooked through.";
        String mealtype = "breakfast";
        String method = "PUT";

        String urlString = "http://localhost:8100/";
        URL url = new URI(urlString).toURL();
        HttpURLConnection conn = (HttpURLConnection) url.openConnection();
        conn.setRequestMethod(method);
        conn.setDoOutput(true);


        // writing to the body of the request
        String reqBody = user + "+" + recipeTitle + "+" + ingred + "+" + instructions;
        OutputStreamWriter out = new OutputStreamWriter(conn.getOutputStream());
        out.write(URLEncoder.encode(reqBody, "UTF-8"));
        out.flush();
        out.close();

        // reading the input
        BufferedReader in = new BufferedReader(new InputStreamReader(conn.getInputStream()));
        String response = in.readLine();    
        in.close();

        assertEquals("valid put", response);

        try (MongoClient mongoClient = MongoClients.create(MONGOURI)) {
            MongoDatabase database = mongoClient.getDatabase("PantryPal");
            MongoCollection<Document> collection = database.getCollection("recipes");
>>>>>>> 6d96ddf2e04ecb9801bac22d892a25b0016f4dde
      
            Bson filter = eq("title", recipeTitle);
            Bson filter2 = eq("user",user);
            filter = combine(filter,filter2);

            // checkign that post method correctly added to database
<<<<<<< HEAD
            Document rec = collection.find(filter).first();
            assertEquals(recipeTitle, rec.getString("title"));
            //assertTrue(rec.getString("content").contains(instructions));
            assertEquals(user,rec.getString("user"));
            assertEquals(mealtype, rec.getString("mealtype"));
=======
            Document recipe = collection.find(filter).first();
            assertEquals(recipeTitle, recipe.getString("title"));
            assertEquals(ingred, recipe.getString("ingredients"));
            assertEquals(instructions,recipe.getString("instructions"));
            assertEquals(user,recipe.getString("user"));
            assertEquals(mealtype, recipe.getString("mealtype"));
>>>>>>> 6d96ddf2e04ecb9801bac22d892a25b0016f4dde

        }
        
        MyServer.stop();
    }

    @Test
    void DELETErequestHandlerTest() throws IOException, URISyntaxException{
        MyServer.main(null);

        // setting up a fake recipe to test the DELETE endpoint for requesthandler route
        String t = "testTitle";
        String i = "testIngredients";
        String ins = "testInstructinos";
        String u = "testUser";
        String m = "testMealtype";

        try (MongoClient mongoClient = MongoClients.create(MONGOURI)) {
            MongoDatabase database = mongoClient.getDatabase("PantryPal");
            MongoCollection<Document> collection = database.getCollection("recipes");
            
            Document recipe = new Document("_id", new ObjectId());
            recipe.append("title", t);
            recipe.append("ingredients", i);
            recipe.append("instructions", ins);
            recipe.append("user", u);
            recipe.append("mealtype", m);

            collection.insertOne(recipe);
        }

        // starting the delete request
        String method = "DELETE";
        String query = URLEncoder.encode("u=" + u + "&q=" + t, "UTF-8");
        String urlString = "http://localhost:8100/?" + query;
        URL url = new URI(urlString).toURL();
        HttpURLConnection conn = (HttpURLConnection) url.openConnection();
        conn.setRequestMethod(method);
        conn.setDoOutput(true);

        // reading the output
        BufferedReader in = new BufferedReader(new InputStreamReader(conn.getInputStream()));
        String response = in.readLine();  
        assertEquals("valid delete", response);
        
        in.close();

        try (MongoClient mongoClient = MongoClients.create(MONGOURI)) {
            MongoDatabase database = mongoClient.getDatabase("PantryPal");
            MongoCollection<Document> collection = database.getCollection("recipes");

            Bson filter = Filters.and(Filters.eq("title",t),Filters.eq("user", u));
            Document recipe = collection.find(filter).first();
            assertNull(recipe);
        }

        MyServer.stop();
    }

    // just testing Share request handler method,  GET METHOD
    // USER+TITLE+INGREDIENTS+INSTRUCTIONS+MEALTYPE
    // UNIT TEST
    @Test
    void GETShareHandlerUnitTest() throws IOException, URISyntaxException{
        MyServer.main(null);
<<<<<<< HEAD

        String t = "testTitle";
        String u = "testUser12";
        String m = "testMealtype";
        String c = "Testcontent";
        String method = "GET";

        try (MongoClient mongoClient = MongoClients.create(MONGOURI)) {
            MongoDatabase database = mongoClient.getDatabase("PantryPal");
            MongoCollection<Document> collection = database.getCollection("recipes");
            
            Document recipe = new Document("_id", new ObjectId());
            recipe.append("title", t);
            recipe.append("user", u);
            recipe.append("mealtype", m);
            recipe.append("content", c);

            collection.insertOne(recipe);

            String query = URLEncoder.encode("u=" + u + "&q=" + t, "UTF-8");
            String urlString = "http://localhost:8100/?" + query;
            URL url = new URI(urlString).toURL();
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.setRequestMethod(method);
            conn.setDoOutput(true);
            BufferedReader in = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String response = in.readLine();
            in.close();

            String combined = t + "+" + c;
            assertEquals(response, combined);

            Bson filter = Filters.and(Filters.eq("title",t),Filters.eq("user", u));
            collection.findOneAndDelete(filter);

        }

        // have a recipe in the database already

=======
        // have a recipe in the database already
        String recipeTitle = "Hash and Egg Breakfast Skillet";
        String user = "adrian";
        String method = "GET";
        String recipe = "Hash and Egg Breakfast Skillet+2 teaspoons olive oil, 2 cups frozen shredded potatoes, 1/2 cup diced onion, 1/2 cup chopped green bell pepper, 1/2 teaspoon garlic pepper seasoning, 1 (12-ounce) package turkey sausage, 8 large eggs, 1/4 teaspoon salt, 1/4 teaspoon black pepper+Heat oil in a large skillet over medium-high heat. Add potatoes, onion, bell pepper, and garlic pepper seasoning. Cook for 10 minutes, stirring often. Move the potato mixture to the side of the skillet and add sausage. Cook for 6-8 minutes, stirring and breaking up the sausage as it cooks. Push the potato mixture to the side and crack eggs into the same skillet. Sprinkle with salt and black pepper. Cook until eggs are scrambled and the sausage and potatoes are cooked through.";

        String query = URLEncoder.encode("u=" + user + "&q=" + recipeTitle, "UTF-8");
        String urlString = "http://localhost:8100/?" + query;
        URL url = new URI(urlString).toURL();
        HttpURLConnection conn = (HttpURLConnection) url.openConnection();
        conn.setRequestMethod(method);
        conn.setDoOutput(true);
        BufferedReader in = new BufferedReader(new InputStreamReader(conn.getInputStream()));
        String response = in.readLine();
        in.close();

        assertEquals(response, recipe);
>>>>>>> 6d96ddf2e04ecb9801bac22d892a25b0016f4dde
        
        MyServer.stop();
    }

    // UNIT TEST
    /*
     * Mocks the whisper prompt
     * Takes the mealtype, ingredients and makes it into a prompt
     * Pushes the prompt through Model to check if the Whisper gets the same information
     * compares the prompts
     */
    @Test
    void WhisperPromptTest() throws IOException, URISyntaxException{
        MyServer.main(null);
        String mealType = "lunch";
        String ingredients = "Bacon, Eggs and ham";
        String prompt = "Make me a " + mealType + " recipe with " + ingredients;

        Model model = new Model();
        String response = model.performRequest("POST", mealType, ingredients, null, null, "mockwhisper");
        
        System.out.println(response);

        assertEquals(response, prompt);
        MyServer.stop();
    }





<<<<<<< HEAD
=======
    @Test
    void sortAlphabeticallyTest() throws IOException { 
        Model sortModelTest = new Model();

        String recipe1 = "B";
        String recipe2 = "A";
        String recipe3 = "C";
        String input = recipe1 + "_" + recipe2 + "_" + recipe3;
        String temp = sortModelTest.sortAlphabetically(input);  
        
        String sorted = recipe2 + "_" + recipe1 + "_" + recipe3;
        assertEquals(temp, sorted);
    }

    @Test
    void sortRAlphabeticallyTest() throws IOException { 
        Model sortModelTest = new Model();

        String recipe1 = "B";
        String recipe2 = "A";
        String recipe3 = "C";
        String input = recipe1 + "_" + recipe2 + "_" + recipe3;
        String temp = sortModelTest.sortRAlphabetically(input);  
        
        String sorted = recipe3 + "_" + recipe1 + "_" + recipe2;
        assertEquals(temp, sorted);
    }

    @Test
    void sortChronologicalTest() throws IOException { 
        Model sortModelTest = new Model();

        String recipe1 = "B";
        String recipe2 = "A";
        String recipe3 = "C";
        String input = recipe1 + "_" + recipe2 + "_" + recipe3;
        String temp = sortModelTest.sortChronological(input);  
        
        String sorted = recipe1 + "_" + recipe2 + "_" + recipe3;
        assertEquals(temp, sorted);
    }

    @Test
    void sortRChronologicalTest() throws IOException { 
        Model sortModelTest = new Model();

        String recipe1 = "B";
        String recipe2 = "A";
        String recipe3 = "C";
        String input = recipe1 + "_" + recipe2 + "_" + recipe3;
        String temp = sortModelTest.sortRChronological(input);  
        
        String sorted = recipe3 + "_" + recipe2 + "_" + recipe1;
        assertEquals(temp, sorted);
    }
>>>>>>> 6d96ddf2e04ecb9801bac22d892a25b0016f4dde
}